{"version":3,"sources":["components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","serviceWorker.js","index.js","App.module.css","images/CoronaVirusHeader.jpg","images/loading.gif","components/Cards/Cards.module.css"],"names":["Cards","data","confirmed","recovered","deaths","lastUpdate","Date","toDateString","className","cx","styles","container","infected","start","end","value","duration","separator","date","src","loadingImage","alt","url","fetchData","country","a","changableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","reportDate","fetchCountries","countries","name","Charts","useState","setDailyData","useEffect","dailyDatas","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barGraph","options","legend","display","title","text","CountryPicker","handleChnageCountry","setCountry","defaultValue","onChange","e","target","key","App","state","fetchedData","setState","this","coronaImage","style","Chart","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.9a35f099.chunk.js","sourcesContent":["import React from 'react'\r\nimport styles from './Cards.module.css'; \r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport CountUp from 'react-countup'\r\nimport cx from 'classnames'; \r\nimport loadingImage from '../../images/loading.gif'\r\n\r\nfunction Cards({data: {confirmed, recovered, deaths, lastUpdate }}) {\r\n    lastUpdate = new Date(lastUpdate).toDateString();\r\n    return (\r\n        <div className={cx(\"container my-3\", styles.container)}>\r\n            {   !confirmed ? (\r\n                    <div className=\"text-center\"><img className=\"w-50\" src={loadingImage} alt=\"Lazy loading\"/></div>\r\n                ) : (\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-12 col-md-4\">\r\n                            <div className={cx(\"card text-center\", styles.infected)}>\r\n                                <div className=\"card-body\">\r\n                                    <h5 className=\"card-title\">Infected</h5>\r\n                                    <CountUp \r\n                                        start={0} \r\n                                        end={confirmed.value}\r\n                                        duration={2.5}\r\n                                        separator=\",\"\r\n                                    />\r\n                                    <p className={cx(\"card-text\", styles.date)}>{lastUpdate}</p>\r\n                                    <p>Number of active cases of COVID-19</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"col-sm-12 col-md-4\">\r\n                            <div className={cx(\"card text-center\", styles.recovered)}>\r\n                                <div className=\"card-body\">\r\n                                    <h5 className=\"card-title\">Covered</h5>\r\n                                    <CountUp \r\n                                        start={0} \r\n                                        end={recovered.value}\r\n                                        duration={2.5}\r\n                                        separator=\",\"\r\n                                    />\r\n                                    <p className={cx(\"card-text\", styles.date)}>{lastUpdate}</p>\r\n                                    <p>Number of recoveries form COVID-19</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"col-sm-12 col-md-4\">\r\n                            <div className={cx(\"card text-center\", styles.deaths)}>\r\n                                <div className=\"card-body\">\r\n                                    <h5 className=\"card-title\">Deaths</h5>\r\n                                    <CountUp \r\n                                        start={0} \r\n                                        end={deaths.value}\r\n                                        duration={2.5}\r\n                                        separator=\",\"\r\n                                    />\r\n                                    <p className={cx(\"card-text\", styles.date)}>{lastUpdate}</p>\r\n                                    <p>Number of deaths caused by COVID-19</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards\r\n","import axios from 'axios'\r\n\r\nconst url = \"https://covid19.mathdro.id/api\"\r\n\r\nexport const fetchData = async (country) => {\r\n    let changableUrl = url;     \r\n    if(country) {\r\n        changableUrl = `${url}/countries/${country}`; \r\n    }\r\n\r\n    try {\r\n        const {data: {confirmed, recovered, deaths, lastUpdate}} = await axios.get(changableUrl);\r\n        return {confirmed, recovered, deaths, lastUpdate};\r\n\r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`);\r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total, \r\n            deaths: dailyData.deaths.total, \r\n            date: dailyData.reportDate,\r\n        }))\r\n\r\n        return modifiedData;\r\n\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try{\r\n        const { data:{countries}} = await axios.get(`${url}/countries`);\r\n        return countries.map((country) => country.name);\r\n    } catch(error) {\r\n        console.log(error)\r\n    }\r\n}","import React, {useState, useEffect} from 'react'\r\nimport './Chart.module.css'\r\nimport { fetchDailyData } from '../../api';\r\nimport {Line, Bar} from 'react-chartjs-2'\r\n\r\nconst  Charts = ({ data:{confirmed, recovered, deaths}, country }) => {\r\n    const [dailyData, setDailyData] = useState([]); \r\n\r\n    useEffect (() => {\r\n        const fetchAPI = async () => {\r\n            const dailyDatas = await fetchDailyData();\r\n            setDailyData(dailyDatas)\r\n        }\r\n\r\n        fetchAPI();\r\n    }, []);\r\n\r\n    /** Line Chart for global */\r\n    const lineChart = (\r\n        dailyData.length\r\n        ? (\r\n        <Line\r\n            data = {{\r\n                labels: dailyData.map(({date}) => date), \r\n                datasets: [{\r\n                    data: dailyData.map(({confirmed})=>confirmed),\r\n                    label: 'Infected', \r\n                    borderColor: '#3333ff', \r\n                    fill: true,\r\n                }, {\r\n                    data: dailyData.map(({deaths})=>deaths),\r\n                    label: 'Deaths', \r\n                    borderColor: 'red', \r\n                    backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n                    fill: true,\r\n                }]\r\n            }}\r\n        />\r\n        ) : null\r\n    );\r\n\r\n    /** bar chart for eact country */ \r\n    const barGraph = (\r\n        confirmed ? (\r\n            <Bar \r\n                data ={{\r\n                    labels: ['Infected', 'Recovered', 'Deaths'],\r\n                    datasets: [{\r\n                        label:'People', \r\n                        backgroundColor: [\r\n                            'rgb(27, 161, 161)', \r\n                            'rgb(75, 192, 80)', \r\n                            'rgb(192, 75, 75)'\r\n                        ], \r\n                        data:[confirmed.value, recovered.value, deaths.value]\r\n                    }]\r\n                }}\r\n\r\n                options = {{\r\n                    legend: {display: false}, \r\n                    title: {display:true, text: `Current state in ${country}`}\r\n                }}\r\n            />\r\n        ) : null\r\n    ); \r\n\r\n    return (\r\n        <div className=\"container mt-5 mb-5\">\r\n            {country ? barGraph : lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Charts\r\n","import React, {useEffect, useState} from 'react'\r\nimport { fetchCountries } from '../../api'; \r\n\r\nconst CountryPicker = ({handleChnageCountry}) => {\r\n    const [country, setCountry] = useState([])\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setCountry(await fetchCountries());\r\n        }\r\n    \r\n        fetchAPI();\r\n    }, [setCountry])\r\n\r\n    return (\r\n        <div className=\"container mt-4 mb-5\">\r\n            <div className=\"form-group\">\r\n                <select className=\"form-control\" defaultValue=\"\" onChange={(e) => handleChnageCountry(e.target.value)}>\r\n                    <option value=\"\">Global</option>\r\n                    {country.map((country)=>{\r\n                        return (\r\n                        <option value={country} key={country}>{country}</option>\r\n                        )\r\n                    })}\r\n                </select>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CountryPicker\r\n","import React from 'react'\nimport style from './App.module.css'; \nimport 'bootstrap/dist/css/bootstrap.css';\nimport coronaImage from './images/CoronaVirusHeader.jpg'\n\nimport {Cards, Chart, CountryPicker} from './components'\nimport { fetchData } from './api'\n\nclass App extends React.Component {\n  state = {\n    data: {},\n    country: '',\n  }\n\n  async componentDidMount () {\n    const fetchedData = await fetchData();\n    this.setState({ data: fetchedData });\n  }\n\n  // handle country change \n  handleChnageCountry = async (country) => {\n    const fetchedData  = await fetchData(country); \n    this.setState({country: country, data: fetchedData});\n  }\n\n  render() {\n    return (\n      <div>\n        <img alt=\"coronaimage\" src={coronaImage} className={style.coronaImage}/>\n        <CountryPicker handleChnageCountry={this.handleChnageCountry} />\n        <Cards data={this.state.data}/>\n        <Chart data={this.state.data} country={this.state.country} />\n      </div>\n    )\n  }\n  \n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"coronaImage\":\"App_coronaImage__1CgZ-\"};","module.exports = __webpack_public_path__ + \"static/media/CoronaVirusHeader.2c34cc69.jpg\";","module.exports = __webpack_public_path__ + \"static/media/loading.63eb7825.gif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"infected\":\"Cards_infected__1eRO3\",\"recovered\":\"Cards_recovered__1UjFe\",\"deaths\":\"Cards_deaths__N3CzE\",\"date\":\"Cards_date__awXR5\"};"],"sourceRoot":""}